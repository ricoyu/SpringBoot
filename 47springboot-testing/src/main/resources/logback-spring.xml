<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <springProperty scope="context" name="logging.path"  source="logging.path"/>
    <springProperty scope="context" name="logging.level"  source="logging.level.root"/>
    
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSSS} [%thread] %-5level %logger{50} L%L - %msg%n</pattern>
        </encoder>
    </appender>    
    
    <appender name="ROLLINGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${logging.level}</level>
        </filter>
        <!-- 假如我们不想在info里面出现error-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 如果命中就禁止这条日志 -->
            <onMatch>DENY</onMatch>
            <!-- 如果没有命中就使用这条规则 -->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <file>${logging.path}/springboot-testing.log</file>
        <!-- 每天生成一个日志文件, 保存12天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${logging.path}/springboot-lifecycle.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>1GB</totalSizeCap>
            <MaxHistory>12</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期, %thread表示线程名, %-5level：级别从左显示5个字符宽度 %L显示行号 %msg：日志消息, %n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} L%L - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ERRORFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
        <file>${logging.path}/springboot-testing-error.log</file>
        <!-- 每天生成一个日志文件, 保存12天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${logging.path}/springboot-lifecycle-error.log.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>1GB</totalSizeCap>
            <MaxHistory>12</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期, %thread表示线程名, %-5level：级别从左显示5个字符宽度 %L显示行号 %msg：日志消息, %n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} L%L - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--比如说我们有个定时任务类需要单独来记录其日志信息, 我们就可以考虑使用基于类维度来约束打印-->
    <!--<logger name="com.sexyuncle.springboot.lifecycle.SpringLifecycleApplication" level="${logging.level}" additivity="true">
        <appender-ref ref="STDOUT" />
    </logger>-->
    
    <root level="${logging.level}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLINGFILE"/>
        <appender-ref ref="ERRORFILE"/>
    </root>
</configuration>