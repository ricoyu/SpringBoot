server:
  port: 999
  contextPath: / 
  
spring:
  datasource:
    druid:
      url: jdbc:mysql://192.168.102.103:3306/learning_db
      # 根据url自动识别。这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
      #driver-class-name: com.mysql.jdbc.Driver
      username: learning
      password: learning123456789
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 5
      min-idle: 5
      # 最大连接池数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      #检测连接是否有效的sql
      validation-query: SELECT 1
      validation-query-timeout: 60000
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      keep-alive: false
      # 默认1分钟，有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间,30分钟
      min-evictable-idle-time-millis: 1800000
      # PSCache Mysql下建议关闭
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: -1

  jpa:
    properties:
      entitymanager:
        packagesToScan: com.sexyuncle.springboot.search.entity.BaseballCard
        
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
        jdbc.batch_size: 20
        order_inserts: true
        hbm2ddl.auto: update
        search:
          default:
            #Select Elasticsearch as the backend
            indexmanager: elasticsearch
            elasticsearch:
              host: http://192.168.102.109:9200
              #host: http://118.178.252.68:9200
              #You may also select multiple hosts (separated by whitespace characters), so that they are assigned requests in turns (load balancing):
              #hibernate.search.default.elasticsearch.host http://es1.mycompany.com:9200 http://es2.mycompany.com:9200
              #index_schema_management_strategy: CREATE
              username: elastic
              password: test123456
              index_schema_management_strategy: create
              #生产环境建议用 none 或者 validate
              #create   The default: an existing index will not be altered, a missing index will be created along with their mappings and analyzer definitions.
              #none     The index, its mappings and the analyzer definitions will not be created, deleted nor altered. Hibernate Search will not even check that the index already exists.
              #validate The index, its existing mappings and analyzer definitions will be checked to be compatible with the metamodel of your application. The index, its mappings and analyzer definitions will not be created, deleted nor altered.
              #update   The index, its mappings and analyzer definitions will be created, existing mappings will be updated if there are no conflicts. Caution: if analyzer definitions have to be updated, the index will be closed automatically during the update.
              #drop-and-create-and-drop Similar to drop-and-create but will also delete the index at shutdown. Commonly used for tests.
              required_index_status: yellow
              
              #The behavior with respect to dynamically added fields in the Elasticsearch mapping
              #This setting may be overridden in custom field bridges on a per-field basis: see Dynamic mapping.
              dynamic_mapping: true
                              #true: Add unknown fields to the schema dynamically
                              #false: Ignore unknown fields
                              #strict: Throw an exception on unknown fields
              
              #Maximum time to wait for the successful execution of a request to the Elasticsearch server before failing (in ms)
              request_timeout: 60000
              #Maximum time to wait for a connection to the Elasticsearch server before failing (in ms)
              connection_timeout: 3000
              #Maximum time to wait for a response from the Elasticsearch server before failing (in ms)
              read_timeout: 60000
              #Maximum number of simultaneous connections to the Elasticsearch cluster
              max_total_connection: 20
              #Maximum number of simultaneous connections to a single Elasticsearch server
              max_total_connection_per_route: 2
              
              discovery:
                #Whether to enable automatic discovery of servers in the Elasticsearch cluster (true or false)
                #When using automatic discovery, the Elasticsearch client will periodically probe for new nodes in the cluster, and will add those to the server list (see host above). Similarly, the client will periodically check whether registered servers still respond, and will remove them from the server list if they don’t.
                enabled: false
                #Time interval between two executions of the automatic discovery (in seconds)
                #This setting will only be taken into account if automatic discovery is enabled
                refresh_interval: 10
                #Scheme to use when connecting to automatically discovered nodes (http or https)
                default_scheme: http
                
              #Maximum time to wait for the indexes to become available before failing (in ms)
              #This setting is ignored when the NONE strategy is selected, since the index will not be checked on startup
              #This value must be lower than the read timeout
              index_management_wait_timeout: 10000
              
              #Status an index must at least have in order for Hibernate Search to work with it (one of "green", "yellow" or "red")
              #默认green
              #Only operate if the index is at this level or safer. In development, set this value to yellow if the number of nodes started is below the number of expected replicas.
              required_index_status: yellow
              #Whether to perform an explicit refresh after a set of operations has been executed against a specific index (true or false)
              #This is useful in unit tests to ensure that a write is visible by a query immediately without delay. This keeps unit tests simpler. You should not rely on the synchronous behaviour for your production code except in rare cases as Elasticsearch is optimised for asynchronous writes: leave at false for optimal performance.
              refresh_after_write: false
              #When scrolling, the minimum number of previous results kept in memory at any time
              scroll_backtracking_window_size: 10000
              #When scrolling, the number of results fetched by each Elasticsearch call
              scroll_fetch_size: 1000
              #When scrolling, the maximum duration ScrollableResults will be usable if no other results are fetched from Elasticsearch, in seconds
              scroll_timeout: 60
              
              #Whether JSON included in logs should be pretty-printed (indented, with line breaks) (true or false 默认)
              log: 
                json_pretty_printing: true

  #==================================
  # Properties prefixed with hibernate.search.default can be given globally as shown above and/or be given for specific indexes:
  # 
  # hibernate.search.someindex.elasticsearch.index_schema_management_strategy update
  # 
  # This excludes properties related to the internal Elasticsearch client, 
  # which at the moment is common to every index manager (but this will change in a future version). 
  # Excluded properties are host, username, password, read_timeout, connection_timeout, max_total_connection, max_total_connection_per_route, http_client_configurer, discovery.enabled, discovery.refresh_interval and discovery.scheme.      
  #==================================  
   
  #==================================
  # = Thymeleaf configurations 
  #==================================
  thymeleaf:
    check-template-location: true
    prefix: classpath:/templates/
    suffix: .html
    content-type: text/html
    cache: false     
